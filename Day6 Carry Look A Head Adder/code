module FullAdder (x, y, z, s, c);//module full adder used for call purpose
  input x, y, z;
  output s, c;
  assign s = x ^ y ^ z;
  assign c = (x & y) | (y & z) | (z & x);
endmodule

module CLA (a, b, cin, sum, carry);//starting of the cla adder module 
  input [3:0] a, b;
  input cin;
  output [3:0] sum;
  output carry;
  wire [3:0] co;

  assign co[0] = (a[0] & b[0]) + ((a[0] ^ b[0]) & cin);
  assign co[1] = (a[1] & b[1]) + ((a[1] ^ b[1]) & ((a[0] & b[0]) + ((a[0] ^ b[0]) & cin)));
  assign co[2] = (a[2] & b[2]) + ((a[2] ^ b[2]) & ((a[1] & b[1]) + ((a[1] ^ b[1]) & ((a[0] & b[0]) + ((a[0] ^ b[0]) & cin)))));
  assign co[3] = (a[3] & b[3]) + (a[3] ^ b[3]) & (a[2] & b[2]) + ((a[2] ^ b[2]) & ((a[1] & b[1]) + ((a[1] ^ b[1]) & ((a[0] & b[0]) + ((a[0] ^ b[0]) & cin)))));

  FullAdder module1 (a[0], b[0], cin, sum[0]);
  FullAdder module2 (a[1], b[1], co[0], sum[1]);
  FullAdder module3 (a[2], b[2], co[1], sum[2]);
  FullAdder module4 (a[3], b[3], co[2], sum[3]);

  assign carry = co[3];
endmodule
